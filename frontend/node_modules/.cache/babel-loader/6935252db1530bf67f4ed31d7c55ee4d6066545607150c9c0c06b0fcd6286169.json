{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jkswi\\\\EchoMind\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport MicrophoneButton from './components/MicrophoneButton.tsx';\nimport TranscriptDisplay from './components/TranscriptDisplay.tsx';\nimport ResponsePlayer from './components/ResponsePlayer.tsx';\nimport { processAudio } from './api.ts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        await processRecording(audioBlob);\n        stream.getTracks().forEach(track => track.stop());\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      setError(null);\n    } catch (err) {\n      setError('Failed to start recording. Please check microphone permissions.');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      setIsProcessing(true);\n    }\n  };\n  const processRecording = async audioBlob => {\n    try {\n      const result = await processAudio(audioBlob);\n      setResult(result);\n    } catch (err) {\n      setError('Failed to process audio. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleMicrophoneToggle = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"EchoMind Voice AI Agent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the microphone to start speaking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MicrophoneButton, {\n        isRecording: isRecording,\n        isProcessing: isProcessing,\n        onToggle: handleMicrophoneToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\u274C \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [/*#__PURE__*/_jsxDEV(TranscriptDisplay, {\n          transcript: result.transcript,\n          intent: result.intent,\n          confidence: result.confidence\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ResponsePlayer, {\n          responseText: result.response_text,\n          audioUrl: result.audio_url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"D18u2i8mgCA8BEcQmKb8v+VAWKM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","MicrophoneButton","TranscriptDisplay","ResponsePlayer","processAudio","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","isProcessing","setIsProcessing","result","setResult","error","setError","mediaRecorderRef","audioChunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","processRecording","getTracks","forEach","track","stop","start","err","stopRecording","handleMicrophoneToggle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onToggle","transcript","intent","confidence","responseText","response_text","audioUrl","audio_url","_c","$RefreshReg$"],"sources":["C:/Users/jkswi/EchoMind/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport MicrophoneButton from './components/MicrophoneButton.tsx';\r\nimport TranscriptDisplay from './components/TranscriptDisplay.tsx';\r\nimport ResponsePlayer from './components/ResponsePlayer.tsx';\r\nimport { processAudio } from './api.ts';\r\nimport './App.css';\r\n\r\ninterface ProcessingResult {\r\n  transcript: string;\r\n  intent: string;\r\n  confidence: number;\r\n  response_text: string;\r\n  audio_url: string;\r\n}\r\n\r\nfunction App() {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [result, setResult] = useState<ProcessingResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n  const audioChunksRef = useRef<Blob[]>([]);\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      audioChunksRef.current = [];\r\n\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        audioChunksRef.current.push(event.data);\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = async () => {\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\r\n        await processRecording(audioBlob);\r\n        stream.getTracks().forEach(track => track.stop());\r\n      };\r\n\r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to start recording. Please check microphone permissions.');\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n      setIsRecording(false);\r\n      setIsProcessing(true);\r\n    }\r\n  };\r\n\r\n  const processRecording = async (audioBlob: Blob) => {\r\n    try {\r\n      const result = await processAudio(audioBlob);\r\n      setResult(result);\r\n    } catch (err) {\r\n      setError('Failed to process audio. Please try again.');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleMicrophoneToggle = () => {\r\n    if (isRecording) {\r\n      stopRecording();\r\n    } else {\r\n      startRecording();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>EchoMind Voice AI Agent</h1>\r\n        <p>Click the microphone to start speaking</p>\r\n        \r\n        <MicrophoneButton \r\n          isRecording={isRecording}\r\n          isProcessing={isProcessing}\r\n          onToggle={handleMicrophoneToggle}\r\n        />\r\n        \r\n        {error && (\r\n          <div className=\"error\">\r\n            ‚ùå {error}\r\n          </div>\r\n        )}\r\n        \r\n        {result && (\r\n          <div className=\"results\">\r\n            <TranscriptDisplay \r\n              transcript={result.transcript}\r\n              intent={result.intent}\r\n              confidence={result.confidence}\r\n            />\r\n            \r\n            <ResponsePlayer \r\n              responseText={result.response_text}\r\n              audioUrl={result.audio_url}\r\n            />\r\n          </div>\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,iBAAiB,MAAM,oCAAoC;AAClE,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,SAASC,YAAY,QAAQ,UAAU;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAA0B,IAAI,CAAC;EACnE,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMkB,gBAAgB,GAAGjB,MAAM,CAAuB,IAAI,CAAC;EAC3D,MAAMkB,cAAc,GAAGlB,MAAM,CAAS,EAAE,CAAC;EAEzC,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEP,gBAAgB,CAACQ,OAAO,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;MACpDF,cAAc,CAACO,OAAO,GAAG,EAAE;MAE3BR,gBAAgB,CAACQ,OAAO,CAACE,eAAe,GAAIC,KAAK,IAAK;QACpDV,cAAc,CAACO,OAAO,CAACI,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;MACzC,CAAC;MAEDb,gBAAgB,CAACQ,OAAO,CAACM,MAAM,GAAG,YAAY;QAC5C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACf,cAAc,CAACO,OAAO,EAAE;UAAES,IAAI,EAAE;QAAY,CAAC,CAAC;QACzE,MAAMC,gBAAgB,CAACH,SAAS,CAAC;QACjCZ,MAAM,CAACgB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACnD,CAAC;MAEDtB,gBAAgB,CAACQ,OAAO,CAACe,KAAK,CAAC,CAAC;MAChC9B,cAAc,CAAC,IAAI,CAAC;MACpBM,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOyB,GAAG,EAAE;MACZzB,QAAQ,CAAC,iEAAiE,CAAC;IAC7E;EACF,CAAC;EAED,MAAM0B,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIzB,gBAAgB,CAACQ,OAAO,IAAIhB,WAAW,EAAE;MAC3CQ,gBAAgB,CAACQ,OAAO,CAACc,IAAI,CAAC,CAAC;MAC/B7B,cAAc,CAAC,KAAK,CAAC;MACrBE,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;EAED,MAAMuB,gBAAgB,GAAG,MAAOH,SAAe,IAAK;IAClD,IAAI;MACF,MAAMnB,MAAM,GAAG,MAAMT,YAAY,CAAC4B,SAAS,CAAC;MAC5ClB,SAAS,CAACD,MAAM,CAAC;IACnB,CAAC,CAAC,OAAO4B,GAAG,EAAE;MACZzB,QAAQ,CAAC,4CAA4C,CAAC;IACxD,CAAC,SAAS;MACRJ,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAM+B,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIlC,WAAW,EAAE;MACfiC,aAAa,CAAC,CAAC;IACjB,CAAC,MAAM;MACLvB,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACEb,OAAA;IAAKsC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBvC,OAAA;MAAQsC,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BvC,OAAA;QAAAuC,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChC3C,OAAA;QAAAuC,QAAA,EAAG;MAAsC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAE7C3C,OAAA,CAACL,gBAAgB;QACfQ,WAAW,EAAEA,WAAY;QACzBE,YAAY,EAAEA,YAAa;QAC3BuC,QAAQ,EAAEP;MAAuB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,EAEDlC,KAAK,iBACJT,OAAA;QAAKsC,SAAS,EAAC,OAAO;QAAAC,QAAA,GAAC,SACnB,EAAC9B,KAAK;MAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN,EAEApC,MAAM,iBACLP,OAAA;QAAKsC,SAAS,EAAC,SAAS;QAAAC,QAAA,gBACtBvC,OAAA,CAACJ,iBAAiB;UAChBiD,UAAU,EAAEtC,MAAM,CAACsC,UAAW;UAC9BC,MAAM,EAAEvC,MAAM,CAACuC,MAAO;UACtBC,UAAU,EAAExC,MAAM,CAACwC;QAAW;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eAEF3C,OAAA,CAACH,cAAc;UACbmD,YAAY,EAAEzC,MAAM,CAAC0C,aAAc;UACnCC,QAAQ,EAAE3C,MAAM,CAAC4C;QAAU;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACzC,EAAA,CA9FQD,GAAG;AAAAmD,EAAA,GAAHnD,GAAG;AAgGZ,eAAeA,GAAG;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}