{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000 // 30 second timeout\n});\nexport const processAudio = async audioBlob => {\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'recording.wav');\n  try {\n    const response = await api.post('/full_pipeline', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error processing audio:', error);\n    throw new Error('Failed to process audio');\n  }\n};\nexport const transcribeAudio = async audioBlob => {\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'recording.wav');\n  const response = await api.post('/transcribe', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const classifyIntent = async text => {\n  const response = await api.post('/classify', {\n    text\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","processAudio","audioBlob","formData","FormData","append","response","post","headers","data","error","console","Error","transcribeAudio","classifyIntent","text"],"sources":["C:/Users/jkswi/EchoMind/frontend/src/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 second timeout\r\n});\r\n\r\nexport interface ProcessingResult {\r\n  transcript: string;\r\n  intent: string;\r\n  confidence: number;\r\n  response_text: string;\r\n  audio_url: string;\r\n}\r\n\r\nexport const processAudio = async (audioBlob: Blob): Promise<ProcessingResult> => {\r\n  const formData = new FormData();\r\n  formData.append('audio', audioBlob, 'recording.wav');\r\n\r\n  try {\r\n    const response = await api.post('/full_pipeline', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error processing audio:', error);\r\n    throw new Error('Failed to process audio');\r\n  }\r\n};\r\n\r\nexport const transcribeAudio = async (audioBlob: Blob): Promise<{ transcript: string }> => {\r\n  const formData = new FormData();\r\n  formData.append('audio', audioBlob, 'recording.wav');\r\n\r\n  const response = await api.post('/transcribe', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n\r\n  return response.data;\r\n};\r\n\r\nexport const classifyIntent = async (text: string): Promise<{ intent: string; confidence: number }> => {\r\n  const response = await api.post('/classify', { text });\r\n  return response.data;\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;AAUF,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAe,IAAgC;EAChF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,EAAE,eAAe,CAAC;EAEpD,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,gBAAgB,EAAEJ,QAAQ,EAAE;MAC1DK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAOX,SAAe,IAAsC;EACzF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,EAAE,eAAe,CAAC;EAEpD,MAAMI,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,aAAa,EAAEJ,QAAQ,EAAE;IACvDK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAEF,OAAOF,QAAQ,CAACG,IAAI;AACtB,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOC,IAAY,IAAsD;EACrG,MAAMT,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,WAAW,EAAE;IAAEQ;EAAK,CAAC,CAAC;EACtD,OAAOT,QAAQ,CAACG,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}